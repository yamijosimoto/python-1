1. Реализовать скрипт, в котором должна быть предусмотрена функция расчета заработной платы сотрудника. В расчете необходимо использовать формулу: (выработка в часах * ставка в час) + премия. Для выполнения расчета для конкретных значений необходимо запускать скрипт с параметрами.

def sal():
    try:
        time = float(input('Выработка в часах '))


        salary = int(input('Ставка в долларах'))
        bonus = int(input('Премия в долларах'))
        res = time * salary + bonus
        print (f'заработная плата сотрудника {res}')
    except ValueError:
        return print('Not a number')

sal()


2. Представлен список чисел. Необходимо вывести элементы исходного списка, значения которых больше предыдущего элемента.
Подсказка: элементы, удовлетворяющие условию, оформить в виде списка. Для формирования списка использовать генератор.

my_list = [15, 2, 3, 1, 7, 5, 4, 10]
my_new_list = [number for num, number in enumerate(my_list) if my_list[num - 1] < my_list[num]]
print(f'Исходный список {my_list}')
print(f'Новый список {my_new_list}')


3. Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. Необходимо решить задание в одну строку.
Подсказка: использовать функцию range() и генератор.

print(
    f"Числа от 20 до 240 кратные 20 или 21 - {[number for number in range(20, 241) if number % 20 == 0 or number % 21 == 0]}")

4. Представлен список чисел. Определить элементы списка, не имеющие повторений. Сформировать итоговый массив чисел, соответствующих требованию. Элементы вывести в порядке их следования в исходном списке. Для выполнения задания обязательно использовать генератор.
Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11].
Результат: [23, 1, 3, 10, 4, 11]

my_list = [1, 4, 4, 2, 3, 2, 8, 10, 8, 5]
my_new_list = [number for number in my_list if my_list.count(number) < 2]
print(my_new_list)


5. Реализовать формирование списка, используя функцию range() и возможности генератора. В список должны войти четные числа от 100 до 1000 (включая границы). Необходимо получить результат вычисления произведения всех элементов списка.

from functools import reduce

 
def my_func(number_p, number):
      return number_p * number

print(f'Список четных значений {[number for number in range(99, 1001) if number % 2 == 0]}')
print(f'Результат перемножения всех элементов списка {reduce(my_func, [number for number in range(99, 1001) if number % 2 == 0])}')
 

6. Реализовать два небольших скрипта:
а) итератор, генерирующий целые числа, начиная с указанного,
б) итератор, повторяющий элементы некоторого списка, определенного заранее.

Подсказка: использовать функцию count() и cycle() модуля itertools. Обратите внимание, что создаваемый цикл не должен быть бесконечным. Необходимо предусмотреть условие его завершения.

from itertools import count

for number in count(int(input('Введите число'))):
    print(number) 

from itertools import cycle

my_list = [103, False, 'some str']
for number in cycle(my_list):
    print(number)
       
       
7. Реализовать генератор с помощью функции с ключевым словом yield, создающим очередное значение. При вызове функции должен создаваться объект-генератор. Функция должна вызываться следующим образом: for el in fact(n). Функция отвечает за получение факториала числа, а в цикле необходимо выводить только первые n чисел, начиная с 1! и до n!
Подсказка: факториал числа n — произведение чисел от 1 до n. Например, факториал четырёх 4! = 1 * 2 * 3 * 4 = 24

from itertools import count
from math import factorial

def fibo_gen():
    for el in count(1):
        yield factorial(el)

gen = fibo_gen()
x = 0
for i in gen:
    if x < 15:
        print(i)
        x += 1
    else:
        break 
       
       
